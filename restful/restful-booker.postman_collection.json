{
	"info": {
		"_postman_id": "e721ed33-6081-497c-9dbb-4d6316eec3d5",
		"name": "restful-booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42529668"
	},
	"item": [
		{
			"name": "create new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check if Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"check if Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"check if the response have the property of token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).have.property(\"token\")\r",
							"});\r",
							"let response =pm.response.json();\r",
							"pm.environment.set(\"auth_token\",response.token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urll}}/auth",
					"host": [
						"{{urll}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all IDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check if Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"check if Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"bookingid exists in response \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property(\"bookingid\")\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "0e160f910f7aaf8",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urll}}/booking",
					"host": [
						"{{urll}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "get by firstname &lastname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check if Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"check if Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "0e160f910f7aaf8",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urll}}/booking?firstname=sally&lastname=brown",
					"host": [
						"{{urll}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "sally"
						},
						{
							"key": "lastname",
							"value": "brown"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get filter by check in&check out",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check if Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"check if Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "0e160f910f7aaf8",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "cookie",
						"value": "token={{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{urll}}/booking?checkin=2014-03-13&checkout=2014-05-21",
					"host": [
						"{{urll}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "checkin",
							"value": "2014-03-13"
						},
						{
							"key": "checkout",
							"value": "2014-05-21"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get id1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check if Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"check if Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"firstname exists in response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData).to.have.property(\"firstname\");\r",
							"});\r",
							"pm.test(\"check if firstname is sally\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstmname).to.eql(\"sally\");\r",
							"});\r",
							"pm.test(\"lastname exists in response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"       pm.expect(jsonData).to.have.property(\"lastname\");\r",
							"\r",
							"});\r",
							"pm.test(\"check if lastname is Brown\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.lastname).to.eql(\"Brown\");\r",
							"});\r",
							"\r",
							"pm.test(\"totalprice exists in response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"totalprice\");\r",
							"});\r",
							"pm.test(\"check if total price is 111 \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.totalprice).to.eql(111);\r",
							"});\r",
							"pm.test(\"check if depositpaid is true \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
							"});\r",
							"pm.test(\"check if response has depositpaid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).have.property(\"depositpaid\")\r",
							"});\r",
							"pm.test(\"check if response body has bookingdates\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"bookingdates\");\r",
							"});\r",
							"\r",
							"pm.test(\"check if checkin have date is 2013-02-23\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(\"2013-02-23\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"check if checkout have date is 2013-02-23\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(\"2014-10-23\");\r",
							"});\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>First Name</th>\r",
							"        <th>Last Name</th>\r",
							"        <th>Total Price</th>\r",
							"        <th>Deposit Paid</th>\r",
							"        <th>Check-in Date</th>\r",
							"        <th>Check-out Date</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.firstname}}</td>\r",
							"        <td>{{response.lastname}}</td>\r",
							"        <td>{{response.totalprice}}</td>\r",
							"        <td>{{#if response.depositpaid}}Yes{{else}}No{{/if}}</td>\r",
							"        <td>{{response.bookingdates.checkin}}</td>\r",
							"        <td>{{response.bookingdates.checkout}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return { response: pm.response.json() }\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "cookie",
						"value": "token={{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{urll}}/booking/1",
					"host": [
						"{{urll}}"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "createbooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check if status code is 200 \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"check if Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"check if firstname is Jim\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.booking.firstname).to.eql(\"Jim\");\r",
							"});\r",
							"\r",
							"pm.test(\"check if bookingid = 1437\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingid).to.eql(1437);\r",
							"});\r",
							"\r",
							"pm.test(\"check if bookingid exists\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"bookingid\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urll}}/booking",
					"host": [
						"{{urll}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "update ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check if Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"check if Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"totalprice exists in response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"totalprice\");\r",
							"});\r",
							"pm.test(\"lastname exists in response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"       pm.expect(jsonData).to.have.property(\"lastname\");\r",
							"\r",
							"});\r",
							"pm.test(\"firstname exists in response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData).to.have.property(\"firstname\");\r",
							"});\r",
							"pm.test(\"check if first name is james \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstname).to.eql(\"James\");\r",
							"});\r",
							"pm.test(\"check if last name is Brown \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.lastname).to.eql(\"Brown\");\r",
							"});\r",
							"pm.test(\"check if totalprice\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.totalprice).to.eql(111);\r",
							"});\r",
							"pm.test(\"check if depositpaid=true\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(\"2018-01-01\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "cookie",
						"value": "token={{auth_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urll}}/booking/1",
					"host": [
						"{{urll}}"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "update",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "token=cac9b4500b0a9b5",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/1",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1744306743&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=s%2BJlyMdTNXjX07w1MUwQfHHyZZmNPWVs8pRIjrIOgvo%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1744306743&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=s%2BJlyMdTNXjX07w1MUwQfHHyZZmNPWVs8pRIjrIOgvo%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "170"
						},
						{
							"key": "Etag",
							"value": "W/\"aa-waBDObUc25azXZ1Gkrz0LIEDGrg\""
						},
						{
							"key": "Date",
							"value": "Thu, 10 Apr 2025 17:39:03 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"firstname\": \"James\",\n    \"lastname\": \"Brown\",\n    \"totalprice\": 111,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2018-01-01\",\n        \"checkout\": \"2019-01-01\"\n    },\n    \"additionalneeds\": \"Breakfast\"\n}"
				}
			]
		},
		{
			"name": "patch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check if Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"check if Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"chech if firstname is james\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstname).to.eql(\"James\");\r",
							"});\r",
							"pm.test(\"check if the response have firstname property\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
							"});\r",
							"pm.test(\"check if lastname is Brown\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.lastname).to.eql(\"Brown\");\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"check if the response have lastname property\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"lastname\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "cookie",
						"value": "token={{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urll}}/booking/1",
					"host": [
						"{{urll}}"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "patch",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "token=7225cea6be7bca5",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/1",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1744315498&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5uWyoMMY0RFx%2FTAazlBNyrqz%2B9%2FCPd6KVlylb3KmOfQ%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1744315498&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5uWyoMMY0RFx%2FTAazlBNyrqz%2B9%2FCPd6KVlylb3KmOfQ%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "170"
						},
						{
							"key": "Etag",
							"value": "W/\"aa-k2876xfL/bNBhdqM/pph/39KBS4\""
						},
						{
							"key": "Date",
							"value": "Thu, 10 Apr 2025 20:04:58 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"firstname\": \"James\",\n    \"lastname\": \"Brown\",\n    \"totalprice\": 188,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2016-06-06\",\n        \"checkout\": \"2016-08-27\"\n    },\n    \"additionalneeds\": \"Breakfast\"\n}"
				}
			]
		},
		{
			"name": "delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check ifStatus code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"check if Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{urll}}/booking/1",
					"host": [
						"{{urll}}"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get health check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"checkif Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"check if Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "cookie",
						"value": "token={{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{urll}}/ping",
					"host": [
						"{{urll}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiToken",
			"value": "FIX ME",
			"type": "string"
		}
	]
}